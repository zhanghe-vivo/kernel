use core::ffi::c_int;

// add if_cfg newlibc or musl

cfg_if::cfg_if! {
    if #[cfg(feature = "compat_newlibc")] {
        pub const EPERM: c_int = 1; /* Not super-user */
        pub const ENOENT: c_int = 2; /* No such file or directory */
        pub const ESRCH: c_int = 3; /* No such process */
        pub const EINTR: c_int = 4; /* Interrupted system call */
        pub const EIO: c_int = 5; /* I/O error */
        pub const ENXIO: c_int = 6; /* No such device or address */
        pub const E2BIG: c_int = 7; /* Arg list too long */
        pub const ENOEXEC: c_int = 8; /* Exec format error */
        pub const EBADF: c_int = 9; /* Bad file number */
        pub const ECHILD: c_int = 10; /* No children */
        pub const EAGAIN: c_int = 11; /* No more processes */
        pub const ENOMEM: c_int = 12; /* Not enough core */
        pub const EACCES: c_int = 13; /* Permission denied */
        pub const EFAULT: c_int = 14; /* Bad address */
        pub const ENOTBLK: c_int = 15; /* Block device required */
        pub const EBUSY: c_int = 16; /* Mount device busy */
        pub const EEXIST: c_int = 17; /* File exists */
        pub const EXDEV: c_int = 18; /* Cross-device link */
        pub const ENODEV: c_int = 19; /* No such device */
        pub const ENOTDIR: c_int = 20; /* Not a directory */
        pub const EISDIR: c_int = 21; /* Is a directory */
        pub const EINVAL: c_int = 22; /* Invalid argument */
        pub const ENFILE: c_int = 23; /* Too many open files in system */
        pub const EMFILE: c_int = 24; /* Too many open files */
        pub const ENOTTY: c_int = 25; /* Not a typewriter */
        pub const ETXTBSY: c_int = 26; /* Text file busy */
        pub const EFBIG: c_int = 27; /* File too large */
        pub const ENOSPC: c_int = 28; /* No space left on device */
        pub const ESPIPE: c_int = 29; /* Illegal seek */
        pub const EROFS: c_int = 30; /* Read only file system */
        pub const EMLINK: c_int = 31; /* Too many links */
        pub const EPIPE: c_int = 32; /* Broken pipe */
        pub const EDOM: c_int = 33; /* Math arg out of domain of func */
        pub const ERANGE: c_int = 34; /* Math result not representable */
        pub const ENOMSG: c_int = 35; /* No message of desired type */
        pub const EIDRM: c_int = 36; /* Identifier removed */
        pub const ECHRNG: c_int = 37; /* Channel number out of range */
        pub const EL2NSYNC: c_int = 38; /* Level 2 not synchronized */
        pub const EL3HLT: c_int = 39; /* Level 3 halted */
        pub const EL3RST: c_int = 40; /* Level 3 reset */
        pub const ELNRNG: c_int = 41; /* Link number out of range */
        pub const EUNATCH: c_int = 42; /* Protocol driver not attached */
        pub const ENOCSI: c_int = 43; /* No CSI structure available */
        pub const EL2HLT: c_int = 44; /* Level 2 halted */
        pub const EDEADLK: c_int = 45; /* Deadlock condition */
        pub const ENOLCK: c_int = 46; /* No record locks available */
        pub const EBADE: c_int = 50; /* Invalid exchange */
        pub const EBADR: c_int = 51; /* Invalid request descriptor */
        pub const EXFULL: c_int = 52; /* Exchange full */
        pub const ENOANO: c_int = 53; /* No anode */
        pub const EBADRQC: c_int = 54; /* Invalid request code */
        pub const EBADSLT: c_int = 55; /* Invalid slot */
        pub const EDEADLOCK: c_int = 56; /* File locking deadlock error */
        pub const EBFONT: c_int = 57; /* Bad font file fmt */
        pub const ENOSTR: c_int = 60; /* Device not a stream */
        pub const ENODATA: c_int = 61; /* No data (for no delay io) */
        pub const ETIME: c_int = 62; /* Timer expired */
        pub const ENOSR: c_int = 63; /* Out of streams resources */
        pub const ENONET: c_int = 64; /* Machine is not on the network */
        pub const ENOPKG: c_int = 65; /* Package not installed */
        pub const EREMOTE: c_int = 66; /* The object is remote */
        pub const ENOLINK: c_int = 67; /* The link has been severed */
        pub const EADV: c_int = 68; /* Advertise error */
        pub const ESRMNT: c_int = 69; /* Srmount error */
        pub const ECOMM: c_int = 70; /* Communication error on send */
        pub const EPROTO: c_int = 71; /* Protocol error */
        pub const EMULTIHOP: c_int = 74; /* Multihop attempted */
        pub const ELBIN: c_int = 75; /* Inode is remote (not really error) */
        pub const EDOTDOT: c_int = 76; /* Cross mount point (not really error) */
        pub const EBADMSG: c_int = 77; /* Trying to read unreadable message */
        pub const EFTYPE: c_int = 79; /* Inappropriate file type or format */
        pub const ENOTUNIQ: c_int = 80; /* Given log. name not unique */
        pub const EBADFD: c_int = 81; /* f.d. invalid for this operation */
        pub const EREMCHG: c_int = 82; /* Remote address changed */
        pub const ELIBACC: c_int = 83; /* Can't access a needed shared lib */
        pub const ELIBBAD: c_int = 84; /* Accessing a corrupted shared lib */
        pub const ELIBSCN: c_int = 85; /* .lib section in a.out corrupted */
        pub const ELIBMAX: c_int = 86; /* Attempting to link in too many libs */
        pub const ELIBEXEC: c_int = 87; /* Attempting to exec a shared library */
        pub const ENOSYS: c_int = 88; /* Function not implemented */
        pub const ENMFILE: c_int = 89; /* No more files */
        pub const ENOTEMPTY: c_int = 90; /* Directory not empty */
        pub const ENAMETOOLONG: c_int = 91; /* File or path name too long */
        pub const ELOOP: c_int = 92; /* Too many symbolic links */
        pub const EOPNOTSUPP: c_int = 95; /* Operation not supported on transport endpoint */
        pub const EPFNOSUPPORT: c_int = 96; /* Protocol family not supported */
        pub const ECONNRESET: c_int = 104; /* Connection reset by peer */
        pub const ENOBUFS: c_int = 105; /* No buffer space available */
        pub const EAFNOSUPPORT: c_int = 106; /* Address family not supported by protocol family */
        pub const EPROTOTYPE: c_int = 107; /* Protocol wrong type for socket */
        pub const ENOTSOCK: c_int = 108; /* Socket operation on non-socket */
        pub const ENOPROTOOPT: c_int = 109; /* Protocol not available */
        pub const ESHUTDOWN: c_int = 110; /* Can't send after socket shutdown */
        pub const ECONNREFUSED: c_int = 111; /* Connection refused */
        pub const EADDRINUSE: c_int = 112; /* Address already in use */
        pub const ECONNABORTED: c_int = 113; /* Connection aborted */
        pub const ENETUNREACH: c_int = 114; /* Network is unreachable */
        pub const ENETDOWN: c_int = 115; /* Network interface is not configured */
        pub const ETIMEDOUT: c_int = 116; /* Connection timed out */
        pub const EHOSTDOWN: c_int = 117; /* Host is down */
        pub const EHOSTUNREACH: c_int = 118; /* Host is unreachable */
        pub const EINPROGRESS: c_int = 119; /* Connection already in progress */
        pub const EALREADY: c_int = 120; /* Socket already connected */
        pub const EDESTADDRREQ: c_int = 121; /* Destination address required */
        pub const EMSGSIZE: c_int = 122; /* Message too long */
        pub const EPROTONOSUPPORT: c_int = 123; /* Unknown protocol */
        pub const ESOCKTNOSUPPORT: c_int = 124; /* Socket type not supported */
        pub const EADDRNOTAVAIL: c_int = 125; /* Address not available */
        pub const ENETRESET: c_int = 126;
        pub const EISCONN: c_int = 127; /* Socket is already connected */
        pub const ENOTCONN: c_int = 128; /* Socket is not connected */
        pub const ETOOMANYREFS: c_int = 129;
        pub const EPROCLIM: c_int = 130;
        pub const EUSERS: c_int = 131;
        pub const EDQUOT: c_int = 132;
        pub const ESTALE: c_int = 133;
        pub const ENOTSUP: c_int = 134; /* Not supported */
        pub const ENOMEDIUM: c_int = 135; /* No medium (in tape drive) */
        pub const ENOSHARE: c_int = 136; /* No such host or network path */
        pub const ECASECLASH: c_int = 137; /* Filename exists with different case */
        pub const EILSEQ: c_int = 138;
        pub const EOVERFLOW: c_int = 139; /* Value too large for defined data type */
        pub const ECANCELED: c_int = 140; /* Operation canceled */
        pub const ENOTRECOVERABLE: c_int = 141; /* State not recoverable */
        pub const EOWNERDEAD: c_int = 142; /* Previous owner died */
        pub const ESTRPIPE: c_int = 143; /* Streams pipe error */
        pub const EWOULDBLOCK: c_int = EAGAIN; /* Operation would block */
        pub const __ELASTERROR: c_int = 2000; /* Users can add values starting here */
    } else { // linux errno
        pub const EPERM: c_int = 1; /* Operation not permitted */
        pub const ENOENT: c_int = 2; /* No such file or directory */
        pub const ESRCH: c_int = 3; /* No such process */
        pub const EINTR: c_int = 4; /* Interrupted system call */
        pub const EIO: c_int = 5; /* I/O error */
        pub const ENXIO: c_int = 6; /* No such device or address */
        pub const E2BIG: c_int = 7; /* Argument list too long */
        pub const ENOEXEC: c_int = 8; /* Exec format error */
        pub const EBADF: c_int = 9; /* Bad file number */
        pub const ECHILD: c_int = 10; /* No child processes */
        pub const EAGAIN: c_int = 11; /* Try again */
        pub const ENOMEM: c_int = 12; /* Out of memory */
        pub const EACCES: c_int = 13; /* Permission denied */
        pub const EFAULT: c_int = 14; /* Bad address */
        pub const ENOTBLK: c_int = 15; /* Block device required */
        pub const EBUSY: c_int = 16; /* Device or resource busy */
        pub const EEXIST: c_int = 17; /* File exists */
        pub const EXDEV: c_int = 18; /* Cross-device link */
        pub const ENODEV: c_int = 19; /* No such device */
        pub const ENOTDIR: c_int = 20; /* Not a directory */
        pub const EISDIR: c_int = 21; /* Is a directory */
        pub const EINVAL: c_int = 22; /* Invalid argument */
        pub const ENFILE: c_int = 23; /* File table overflow */
        pub const EMFILE: c_int = 24; /* Too many open files */
        pub const ENOTTY: c_int = 25; /* Not a typewriter */
        pub const ETXTBSY: c_int = 26; /* Text file busy */
        pub const EFBIG: c_int = 27; /* File too large */
        pub const ENOSPC: c_int = 28; /* No space left on device */
        pub const ESPIPE: c_int = 29; /* Illegal seek */
        pub const EROFS: c_int = 30; /* Read-only file system */
        pub const EMLINK: c_int = 31; /* Too many links */
        pub const EPIPE: c_int = 32; /* Broken pipe */
        pub const EDOM: c_int = 33; /* Math argument out of domain of func */
        pub const ERANGE: c_int = 34; /* Math result not representable */
        pub const EDEADLK: c_int = 35; /* Resource deadlock would occur */
        pub const ENAMETOOLONG: c_int = 36; /* File name too long */
        pub const ENOLCK: c_int = 37; /* No record locks available */
        pub const ENOSYS: c_int = 38; /* Function not implemented */
        pub const ENOTEMPTY: c_int = 39; /* Directory not empty */
        pub const ELOOP: c_int = 40; /* Too many symbolic links encountered */
        pub const EWOULDBLOCK: c_int = 41; /* Operation would block */
        pub const ENOMSG: c_int = 42; /* No message of desired type */
        pub const EIDRM: c_int = 43; /* Identifier removed */
        pub const ECHRNG: c_int = 44; /* Channel number out of range */
        pub const EL2NSYNC: c_int = 45; /* Level 2 not synchronized */
        pub const EL3HLT: c_int = 46; /* Level 3 halted */
        pub const EL3RST: c_int = 47; /* Level 3 reset */
        pub const ELNRNG: c_int = 48; /* Link number out of range */
        pub const EUNATCH: c_int = 49; /* Protocol driver not attached */
        pub const ENOCSI: c_int = 50; /* No CSI structure available */
        pub const EL2HLT: c_int = 51; /* Level 2 halted */
        pub const EBADE: c_int = 52; /* Invalid exchange */
        pub const EBADR: c_int = 53; /* Invalid request descriptor */
        pub const EXFULL: c_int = 54; /* Exchange full */
        pub const ENOANO: c_int = 55; /* No anode */
        pub const EBADRQC: c_int = 56; /* Invalid request code */
        pub const EBADSLT: c_int = 57; /* Invalid slot */
        pub const EDEADLOCK: c_int = 58; /* Resource deadlock would occur */
        pub const EBFONT: c_int = 59; /* Bad font file format */
        pub const ENOSTR: c_int = 60; /* Device not a stream */
        pub const ENODATA: c_int = 61; /* No data available */
        pub const ETIME: c_int = 62; /* Timer expired */
        pub const ENOSR: c_int = 63; /* Out of streams resources */
        pub const ENONET: c_int = 64; /* Machine is not on the network */
        pub const ENOPKG: c_int = 65; /* Package not installed */
        pub const EREMOTE: c_int = 66; /* Object is remote */
        pub const ENOLINK: c_int = 67; /* Link has been severed */
        pub const EADV: c_int = 68; /* Advertise error */
        pub const ESRMNT: c_int = 69; /* Srmount error */
        pub const ECOMM: c_int = 70; /* Communication error on send */
        pub const EPROTO: c_int = 71; /* Protocol error */
        pub const EMULTIHOP: c_int = 72; /* Multihop attempted */
        pub const EDOTDOT: c_int = 73; /* RFS specific error */
        pub const EBADMSG: c_int = 74; /* Not a data message */
        pub const EOVERFLOW: c_int = 75; /* Value too large for defined data type */
        pub const ENOTUNIQ: c_int = 76; /* Name not unique on network */
        pub const EBADFD: c_int = 77; /* File descriptor in bad state */
        pub const EREMCHG: c_int = 78; /* Remote address changed */
        pub const ELIBACC: c_int = 79; /* Can not access a needed shared library */
        pub const ELIBBAD: c_int = 80; /* Accessing a corrupted shared library */
        pub const ELIBSCN: c_int = 81; /* .lib section in a.out corrupted */
        /* Attempting to link in too many shared libraries */
        pub const ELIBMAX: c_int = 82;
        pub const ELIBEXEC: c_int = 83; /* Cannot exec a shared library directly */
        pub const EILSEQ: c_int = 84; /* Illegal byte sequence */
        /* Interrupted system call should be restarted */
        pub const ERESTART: c_int = 85;
        pub const ESTRPIPE: c_int = 86; /* Streams pipe error */
        pub const EUSERS: c_int = 87; /* Too many users */
        pub const ENOTSOCK: c_int = 88; /* Socket operation on non-socket */
        pub const EDESTADDRREQ: c_int = 89; /* Destination address required */
        pub const EMSGSIZE: c_int = 90; /* Message too long */
        pub const EPROTOTYPE: c_int = 91; /* Protocol wrong type for socket */
        pub const ENOPROTOOPT: c_int = 92; /* Protocol not available */
        pub const EPROTONOSUPPORT: c_int = 93; /* Protocol not supported */
        pub const ESOCKTNOSUPPORT: c_int = 94; /* Socket type not supported */
        /* Operation not supported on transport endpoint */
        pub const EOPNOTSUPP: c_int = 95;
        pub const ENOTSUP: c_int = EOPNOTSUPP;
        pub const EPFNOSUPPORT: c_int = 96; /* Protocol family not supported */
        /* Address family not supported by protocol */
        pub const EAFNOSUPPORT: c_int = 97;
        pub const EADDRINUSE: c_int = 98; /* Address already in use */
        pub const EADDRNOTAVAIL: c_int = 99; /* Cannot assign requested address */
        pub const ENETDOWN: c_int = 100; /* Network is down */
        pub const ENETUNREACH: c_int = 101; /* Network is unreachable */
        /* Network dropped connection because of reset */
        pub const ENETRESET: c_int = 102;
        pub const ECONNABORTED: c_int = 103; /* Software caused connection abort */
        pub const ECONNRESET: c_int = 104; /* Connection reset by peer */
        pub const ENOBUFS: c_int = 105; /* No buffer space available */
        pub const EISCONN: c_int = 106; /* Transport endpoint is already connected */
        pub const ENOTCONN: c_int = 107; /* Transport endpoint is not connected */
        /* Cannot send after transport endpoint shutdown */
        pub const ESHUTDOWN: c_int = 108;
        pub const ETOOMANYREFS: c_int = 109; /* Too many references: cannot splice */
        pub const ETIMEDOUT: c_int = 110; /* Connection timed out */
        pub const ECONNREFUSED: c_int = 111; /* Connection refused */
        pub const EHOSTDOWN: c_int = 112; /* Host is down */
        pub const EHOSTUNREACH: c_int = 113; /* No route to host */
        pub const EALREADY: c_int = 114; /* Operation already in progress */
        pub const EINPROGRESS: c_int = 115; /* Operation now in progress */
        pub const ESTALE: c_int = 116; /* Stale NFS file handle */
        pub const EUCLEAN: c_int = 117; /* Structure needs cleaning */
        pub const ENOTNAM: c_int = 118; /* Not a XENIX named type file */
        pub const ENAVAIL: c_int = 119; /* No XENIX semaphores available */
        pub const EISNAM: c_int = 120; /* Is a named type file */
        pub const EREMOTEIO: c_int = 121; /* Remote I/O error */
        pub const EDQUOT: c_int = 122; /* Quota exceeded */
        pub const ENOMEDIUM: c_int = 123; /* No medium found */
        pub const EMEDIUMTYPE: c_int = 124; /* Wrong medium type */
        pub const ECANCELED: c_int = 125; /* Operation Canceled */
        pub const ENOKEY: c_int = 126; /* Required key not available */
        pub const EKEYEXPIRED: c_int = 127; /* Key has expired */
        pub const EKEYREVOKED: c_int = 128; /* Key has been revoked */
        pub const EKEYREJECTED: c_int = 129; /* Key was rejected by service */
        pub const EOWNERDEAD: c_int = 130; /* Owner died */
        pub const ENOTRECOVERABLE: c_int = 131; /* State not recoverable */
    }
}
