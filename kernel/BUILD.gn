import("//build/templates/build_template.gni")
import("//build/toolchain/bluekernel.gni")
import("//kernel/common_crate_rustflags.gni")

build_rust("kernel_integration_test") {
  testonly = true
  crate_type = "bin"
  sources = [ "tests/integration_test.rs" ]
  edition = "2021"
  deps = [
    ":bluekernel_test",
    "//kernel/scal:bluekernel_scal_test",
  ]

  inputs = [ "//kernel/kernel/src/bsp/$bsp/link.x" ]
  rustflags = [
    # unstable rust custom test framework
    "--test",

    # custom link script
    "-C",
    "link-arg=-T" + rebase_path("//kernel/kernel/src/bsp/$bsp/link.x"),

    # use lld to link
    # # Tell rustc to use the LLVM linker. This avoids needing GCC as a dependency
    # # to build the kernel.
    # "-C", "linker=rust-lld",
    # # Use the LLVM lld executable with the `-flavor gnu` flag.
    # "-C", "linker-flavor=ld.lld",
    # Enable link-time-optimization
    "-C",
    "lto",

    # Have rustc generate stack sizes for analyzing the size of stack frames.
    "-Z",
    "emit-stack-sizes",
  ]
  rustflags += test_image_rustflags
  rustflags += common_crate_rustflags
}

build_rust("bluekernel_test") {
  testonly = true
  crate_name = "bluekernel"
  crate_type = "rlib"
  sources = [ "src/lib.rs" ]
  edition = "2021"
  proc_macro_deps = [ "//external/paste/v1.0.15:paste" ]
  deps = [
    "//external/cfg-if/v1.0.0:cfg_if",
    "//external/const-default/v1.0.0:const_default",
    "//external/cortex-m:cortex_m",
    "//external/embedded-io/v0.6.1:embedded_io",
    "//external/log/v0.4.22:log",
    "//external/pinned-init/v0.0.8:pinned_init",
    "//external/spin/v0.9.8:spin",
    "//external/thiserror/v2.0.9:thiserror",
    "//external/tock-registers/v0.9.0:tock_registers",
    "//kernel/arch:bluekernel_arch",
    "//kernel/header:bluekernel_header",
    "//kernel/infra:bluekernel_infra",
    "//kernel/kconfig:bluekernel_kconfig",
  ]

  features = [
    "tlsf",
    "overflow_check",
    "idle_hook",
    "heap",
    "heap_isr",
    "debugging_init",
    "event",
    "messagequeue",
    "mailbox",
    "mutex",
    "semaphore",
    "rwlock",
    "condvar",
    "thread_priority_max",
    "schedule_with_time_slice",
  ]

  rustflags = []
  if (direct_syscall_handler) {
    rustflags += [
      "--cfg",
      "direct_syscall_handler",
    ]
  }
  if (bsp == "qemu_mps2_an385" || bsp == "qemu_mps3_an547") {
    rustflags += [
      "--cfg",
      "hardware_schedule",
    ]
  }

  rustflags += [
    "--cfg",
    "target_board=\"$bsp\"",
  ]

  rustflags += common_crate_rustflags
}

build_rust("bluekernel") {
  crate_type = "rlib"
  sources = [ "src/lib.rs" ]
  edition = "2021"
  deps = [
    "//external/cfg-if/v1.0.0:cfg_if",
    "//external/const-default/v1.0.0:const_default",
    "//external/cortex-m:cortex_m",
    "//external/embedded-io/v0.6.1:embedded_io",
    "//external/log/v0.4.22:log",
    "//external/pinned-init/v0.0.8:pinned_init",
    "//external/spin/v0.9.8:spin",
    "//external/thiserror/v2.0.9:thiserror",
    "//external/tock-registers/v0.9.0:tock_registers",
    "//kernel/arch:bluekernel_arch",
    "//kernel/bindings:os_bindings",
    "//kernel/header:bluekernel_header",
    "//kernel/infra:bluekernel_infra",
    "//kernel/kconfig:bluekernel_kconfig",
  ]

  features = [
    "tlsf",
    "overflow_check",
    "idle_hook",
    "heap",
    "heap_isr",
    "debugging_init",
    "event",
    "messagequeue",
    "mailbox",
    "mutex",
    "semaphore",
    "rwlock",
    "condvar",
    "thread_priority_max",
    "schedule_with_time_slice",
    "os_adapter",
    "enable_uart0",
    "enable_uart1",
  ]

  rustflags = []
  if (direct_syscall_handler) {
    rustflags += [
      "--cfg",
      "direct_syscall_handler",
    ]
  }
  if (bsp == "qemu_mps2_an385" || bsp == "qemu_mps3_an547") {
    rustflags += [
      "--cfg",
      "hardware_schedule",
    ]
  }

  rustflags += [
    "--cfg",
    "target_board=\"$bsp\"",
  ]

  rustflags += common_crate_rustflags
}

cbindgen("rust_wrapper") {
  # deps = [ ":bluekernel" ]
  sources = [ "cbindgen.toml" ]
  args = [
           "--quiet",
           "-c",
         ] + rebase_path([ "cbindgen.toml" ], root_build_dir) +
         rebase_path([ "." ], root_build_dir)
}

gen_qemu_runner("integration_test_runner") {
  testonly = true
  img = ":kernel_integration_test"
  qemu = "$qemu_exe"
  board = "$bsp"
}

run_qemu_check("run_integration_test") {
  testonly = true
  runner = ":integration_test_runner"
  checker = "tests/integration_test.rs"
}

executable("bluekernel_image") {
  deps = [
    "//kernel/adapter:adapter",
    "//kernel/scal:bluekernel_scal",
    "//rt-dev:rtt",
  ]

  inputs = [ "//kernel/kernel/src/bsp/$bsp/link.x" ]
  ldflags = [
    "-T",
    rebase_path("//kernel/kernel/src/bsp/$bsp/link.x"),
    "-Wl,-cref,-u,Reset_Handler",
  ]
}

gen_qemu_runner("bluekernel_image_test") {
  testonly = true
  img = ":bluekernel_image"
  qemu = "$qemu_exe"
  board = "$bsp"
}

run_qemu_check("check_bluekernel") {
  testonly = true
  runner = ":bluekernel_image_test"
  checker = "//rt-dev/bsp/$bsp/applications/main.c"
}
