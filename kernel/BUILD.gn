# Copyright (c) 2025 vivo Mobile Communication Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/templates/build_template.gni")
import("//build/toolchain/blueos.gni")
import("//kernel/common_crate_rustflags.gni")

group("check_kernel") {
  testonly = true
  deps = [
    ":run_integration_test",
    ":run_unittest",
  ]
}

shared_deps = [
  "//external/bitflags/v2.9.0:bitflags",
  "//external/cfg-if/v1.0.0:cfg_if",
  "//external/const-default/v1.0.0:const_default",
  "//external/embedded-io/v0.6.1:embedded_io",
  "//external/heapless/v0.8.0:heapless",
  "//external/log/v0.4.22:log",
  "//external/rust-fatfs/v0.4:fatfs",
  "//external/safe-mmio/v0.2.5:safe_mmio",
  "//external/semihosting/v0.1.20:semihosting",
  "//external/smoltcp/v0.12.0:smoltcp",
  "//external/spin/v0.9.8:spin",
  "//external/thiserror/v2.0.9:thiserror",
  "//external/tock-registers/v0.9.0:tock_registers",
  "//external/zerocopy/v0.8.25:zerocopy",
  "//kernel/header:blueos_header",
  "//kernel/infra:blueos_infra",
  "//kernel/kconfig:blueos_kconfig",
  "//libc:libc",
]

if (board == "raspberry_pico2_cortexm") {
  shared_deps += [ "//external/embedded-hal/v1.0.0:embedded_hal" ]
}

if (coverage || profile) {
  shared_deps += [
    ":atomic",
    "//external/minicov/v0.3.7:minicov",
    "//external/semihosting/v0.1.20:semihosting",
  ]
}

shared_rust_build_flags = []
if (direct_syscall_handler) {
  shared_rust_build_flags += [
    "--cfg",
    "direct_syscall_handler",
  ]
}

if (board == "qemu_mps2_an385" || board == "qemu_mps3_an547" ||
    board == "raspberry_pico2_cortexm") {
  shared_rust_build_flags += [
    "--cfg",
    "hardware_schedule",
  ]
  shared_deps += [ "//external/cortex-m/v0.7.7:cortex_m" ]
} else if (board == "qemu_virt64_aarch64") {
  shared_deps += [
    "//external/arm-gic/v0.4.0:arm_gic",
    "//external/flat_device_tree/v3.1.1:flat_device_tree",
    "//external/virtio-drivers/v0.11.0:virtio_drivers",
  ]
} else if (board == "bcm2711") {
  shared_deps += [
    "//external/arm-gic/v0.4.0:arm_gic",
  ]
}

shared_rust_build_flags += [
  "--cfg",
  "target_board=\"$board\"",
]

build_rust("kernel_unittest") {
  testonly = true
  crate_name = "kernel_unittest"
  crate_type = "bin"
  sources = [ "src/lib.rs" ]
  edition = "2021"
  proc_macro_deps = [
    "//external/paste/v1.0.15:paste",
    "//external/rust-delegate/v0.13.3:delegate",
    "//kernel/test_harness:blueos_test_macro",
  ]
  cfgs = blueos_default_cfgs
  deps = shared_deps
  configs += [ "//kernel/kconfig:kconfigs" ]
  inputs = [ "//kernel/kernel/src/boards/$board/link.x" ]
  rustflags = shared_rust_build_flags
  rustflags += test_image_rustflags
}

build_rust("kernel_integration_test") {
  testonly = true
  crate_type = "bin"
  sources = [ "tests/integration_test.rs" ]
  edition = "2021"
  proc_macro_deps = [ "//kernel/test_harness:blueos_test_macro" ]
  deps = [
    ":blueos",
    "//external/byteorder/v1.5.0:byteorder",
    "//external/semihosting/v0.1.20:semihosting",
    "//external/smoltcp/v0.12.0:smoltcp",
    "//kernel/rsrt:rsrt",
    "//kernel/scal:blueos_scal",
    "//libc:libc",
  ]
  if (coverage || profile) {
    deps += [ "//external/minicov/v0.3.7:minicov" ]
  }
  cfgs = blueos_default_cfgs
  configs += [ "//kernel/kconfig:kconfigs" ]
  inputs = [ "//kernel/kernel/src/boards/$board/link.x" ]
  rustflags = test_image_rustflags
}

build_rust("blueos") {
  crate_type = "rlib"
  sources = [ "src/lib.rs" ]
  edition = "2021"
  proc_macro_deps = [
    "//external/paste/v1.0.15:paste",
    "//external/rust-delegate/v0.13.3:delegate",
  ]
  cfgs = blueos_default_cfgs
  deps = shared_deps
  configs += [ "//kernel/kconfig:kconfigs" ]
  rustflags = shared_rust_build_flags
  rustflags += common_crate_rustflags
}

build_rust("blueos_std_static") {
  crate_name = "blueos"
  crate_type = "staticlib"
  sources = [ "src/lib.rs" ]
  edition = "2021"
  proc_macro_deps = [
    "//external/paste/v1.0.15:paste",
    "//external/rust-delegate/v0.13.3:delegate",
  ]
  deps = shared_deps
  configs += [ "//kernel/kconfig:kconfigs" ]
  cfgs = blueos_default_cfgs
  rustflags = shared_rust_build_flags
  rustflags += common_crate_rustflags
  rustflags += [
    "--cfg",
    "std",
  ]
}

build_rust("blueos_std") {
  crate_name = "blueos"
  crate_type = "rlib"
  sources = [ "src/lib.rs" ]
  edition = "2021"
  proc_macro_deps = [
    "//external/paste/v1.0.15:paste",
    "//external/rust-delegate/v0.13.3:delegate",
  ]
  deps = shared_deps
  cfgs = blueos_default_cfgs
  rustflags = shared_rust_build_flags
  rustflags += common_crate_rustflags
  rustflags += [
    "--cfg",
    "std",
  ]
}

build_rust("blueos_posixtestsuite") {
  testonly = true
  crate_name = "blueos"
  crate_type = "rlib"
  sources = [ "src/lib.rs" ]
  edition = "2021"
  proc_macro_deps = [
    "//external/paste/v1.0.15:paste",
    "//external/rust-delegate/v0.13.3:delegate",
  ]
  deps = shared_deps
  cfgs = blueos_default_cfgs
  rustflags = shared_rust_build_flags
  rustflags += common_crate_rustflags
  rustflags += [
    "--cfg",
    "posixtestsuite",
  ]
}

gen_qemu_runner("integration_test_runner") {
  testonly = true
  semihosting = true
  img = ":kernel_integration_test"
  qemu = "$qemu_exe"
  machine = "$machine"
  qemu_args = qemu_extra_args
  net_args = qemu_net_args
  block_img = "integration_test_block.img"
  block_args = qemu_block_args
}

run_qemu_check("run_integration_test") {
  testonly = true
  runner = ":integration_test_runner"
  if (coverage) {
    img = ":kernel_integration_test"
    checker = "src/coverage.checker"
  } else {
    checker = "tests/integration.checker"
  }
}

gen_qemu_runner("unittest_runner") {
  testonly = true
  img = ":kernel_unittest"
  qemu = "$qemu_exe"
  machine = "$machine"
  qemu_args = qemu_extra_args
  block_img = "unittest_block.img"
  block_args = qemu_block_args
  semihosting = true
}

run_qemu_check("run_unittest") {
  testonly = true
  runner = ":unittest_runner"
  if (coverage) {
    img = ":kernel_unittest"
    checker = "src/coverage.checker"
  } else {
    checker = "src/unittests.checker"
  }
}

static_library("atomic") {
  sources = [ "src/sync/libatomic/atomic.c" ]
}
