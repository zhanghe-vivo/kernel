#ifndef KERN_RUST_WRAPPER_H
#define KERN_RUST_WRAPPER_H

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

enum ObjectClassType {
  ObjectClassUninit = 0,
  ObjectClassProcess,
  ObjectClassThread,
  ObjectClassSemaphore,
#if defined(RT_USING_MUTEX)
  ObjectClassMutex,
#endif
#if defined(RT_USING_EVENT)
  ObjectClassEvent,
#endif
  ObjectClassMailBox,
  ObjectClassMessageQueue,
  ObjectClassMemHeap,
  ObjectClassMemPool,
  ObjectClassDevice,
  ObjectClassTimer,
  ObjectClassMemory,
  ObjectClassUnknown,
};
typedef uint8_t ObjectClassType;

/**
 * Base kernel Object
 */
typedef struct rt_object {
  /**
   * TODO: change type to String
   * name of kernel object
   */
  int8_t name[NAME_MAX];
  /**
   * type of kernel object
   */
  uint8_t type_;
  /**
   * list node of kernel object
   */
  rt_list_t list;
} rt_object;

/**
 * The timer structure
 */
typedef struct rt_timer {
  struct rt_object parent;
  TimeoutFn timeout_func;
  void *parameter;
  uint32_t init_tick;
  uint32_t timeout_tick;
  uint8_t flag;
  rt_list_t node;
} rt_timer;

/**
 * Stack management structure
 */
typedef struct rt_stack {
  /**
   * Current stack pointer
   */
  uintptr_t *sp;
  /**
   * Pointer to the lowest address of the stack
   */
  uint8_t *bottom;
  /**
   * Stack size
   */
  uintptr_t size;
} rt_stack;

typedef struct rt_thread {
  struct rt_object parent;
  /**
   * the thread list, used in ready_list\ipc wait_list\...
   */
  rt_list_t tlist;
  /**
   * thread status
   */
  unsigned char stat;
  unsigned char sched_flag_ttmr_set;
  /**
   * priority manager
   */
  unsigned char current_priority;
  unsigned char init_priority;
  unsigned char number;
  unsigned char high_mask;
  unsigned int number_mask;
  /**
   * priority number mask
   * time slice
   */
  unsigned int init_tick;
  unsigned int remaining_tick;
  /**
   * built-in thread timer, used for wait timeout
   */
  struct rt_timer thread_timer;
  /**
   * stack point and entry
   */
  struct rt_stack stack;
  uintptr_t *entry;
  uintptr_t *parameter;
  uintptr_t *cleanup;
#if defined(RT_USING_SMP)
  /**
   * thread binds to cpu
   */
  unsigned char bind_cpu
#endif
  ;
#if defined(RT_USING_SMP)
  /**
   * running on cpu id
   */
  unsigned char oncpu
#endif
  ;
  /**
   * critical lock count
   */
  struct RawSpin spinlock;
  /**
   * error code
   */
  int error;
#if defined(RT_USING_MUTEX)
  /**
   * mutexes holded by this thread
   */
  rt_list_t taken_object_list
#endif
  ;
#if defined(RT_USING_MUTEX)
  /**
   * mutex object
   */
  struct rt_object *pending_object
#endif
  ;
#if defined(RT_USING_EVENT)
  unsigned int event_set
#endif
  ;
#if defined(RT_USING_EVENT)
  unsigned char event_info
#endif
  ;
#if defined(RT_DEBUGING_SPINLOCK)
  struct RawSpin *wait_lock
#endif
  ;
#if defined(RT_DEBUGING_SPINLOCK)
  struct RawSpin *hold_locks[8]
#endif
  ;
#if defined(RT_DEBUGING_SPINLOCK)
  uintptr_t hold_count
#endif
  ;
  uintptr_t tid;
} rt_thread;

#endif /* KERN_RUST_WRAPPER_H */
