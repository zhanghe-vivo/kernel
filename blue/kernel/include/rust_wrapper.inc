#ifndef KERN_RUST_WRAPPER_H
#define KERN_RUST_WRAPPER_H

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

enum ObjectClassType {
  ObjectClassUninit = 0,
  ObjectClassProcess,
  ObjectClassThread,
  ObjectClassCondVar,
  ObjectClassRwLock,
#if defined(RT_USING_SEMAPHORE)
  ObjectClassSemaphore,
#endif
#if defined(RT_USING_MUTEX)
  ObjectClassMutex,
#endif
#if defined(RT_USING_EVENT)
  ObjectClassEvent,
#endif
#if defined(RT_USING_MAILBOX)
  ObjectClassMailBox,
#endif
#if defined(RT_USING_MESSAGEQUEUE)
  ObjectClassMessageQueue,
#endif
  ObjectClassMemHeap,
  ObjectClassMemPool,
  ObjectClassDevice,
  ObjectClassTimer,
  ObjectClassMemory,
  ObjectClassUnknown,
};
typedef uint8_t ObjectClassType;

typedef void (*IdleHookFn)(void);

/**
 * Base kernel Object
 */
typedef struct rt_object {
  /**
   * TODO: change type to String
   * name of kernel object
   */
  int8_t name[NAME_MAX];
  /**
   * type of kernel object
   */
  uint8_t type_;
  /**
   * list node of kernel object
   */
  rt_list_t list;
} rt_object;

typedef uint8_t ThreadState;
#define ThreadState_INIT 0
#define ThreadState_CLOSE 1
#define ThreadState_READY 2
#define ThreadState_RUNNING 3
#define ThreadState_SUSPENDED 4
#define ThreadState_STATE_MASK 7
#define ThreadState_YIELD 8
#define ThreadState_SUSPENDED_INTERRUPTIBLE (ThreadState_SUSPENDED)._0
#define ThreadState_SUSPENDED_KILLABLE ((ThreadState_SUSPENDED)._0 | 1)
#define ThreadState_SUSPENDED_UNINTERRUPTIBLE ((ThreadState_SUSPENDED)._0 | 2)

typedef struct ThreadPriority {
  uint8_t current;
  uint8_t initial;
  uint8_t number;
  uint8_t high_mask;
  uint32_t number_mask;
} ThreadPriority;

/**
 * Stack management structure
 */
typedef struct rt_stack {
  /**
   * Current stack pointer
   */
  uintptr_t *sp;
  /**
   * Pointer to the lowest address of the stack
   */
  uint8_t *bottom;
  /**
   * Stack size
   */
  uintptr_t size;
} rt_stack;

typedef void (*ThreadCleanupFn)(struct rt_thread*);

typedef void (*TimeoutFn)(void*);

/**
 * The timer structure
 */
typedef struct rt_timer {
  struct rt_object parent;
  TimeoutFn timeout_func;
  void *parameter;
  uint32_t init_tick;
  uint32_t timeout_tick;
  uint8_t flag;
  rt_list_t node;
} rt_timer;

typedef int Error;

typedef struct TimeSlice {
  uint32_t init;
  uint32_t remaining;
} TimeSlice;

/**
 * WaitQueue for pending threads
 */
typedef struct RtWaitQueue {
  /**
   * WaitQueue impl by ListHead
   */
  rt_list_t working_queue;
  /**
   * WaitQueue working mode, FIFO or PRIO
   */
  uint32_t waiting_mode;
} RtWaitQueue;

/**
 * System queue for kernel use on IPC
 */
typedef struct RtSysQueue {
  /**
   * Queue item size
   */
  uintptr_t item_size;
  /**
   * Queue item max count
   */
  uintptr_t item_max_count;
  /**
   * Count of items in queue
   */
  uintptr_t item_in_queue;
  /**
   * Queue raw buffer pointer
   */
  uint8_t *queue_buf;
  /**
   * Queue memory size
   */
  uintptr_t queue_buf_size;
  /**
   * If the queue buffer from external, this will be true
   */
  bool is_storage_from_external;
  /**
   * Ringbuffer read position
   */
  uintptr_t read_pos;
  /**
   * Ringbuffer write position
   */
  uintptr_t write_pos;
  /**
   * Queue head pointer
   */
  uint8_t *head;
  /**
   * Queue tail pointer
   */
  uint8_t *tail;
  /**
   * Pointer to first 'free to use' item in queue
   */
  uint8_t *free;
  /**
   * Queue working mode: FIFO by default
   */
  uint32_t working_mode;
  /**
   * Queue for waiting to send items
   */
  struct RtWaitQueue sender;
  /**
   * Queue for waiting to receive items
   */
  struct RtWaitQueue receiver;
  /**
   * Spin lock for queue
   */
  struct RawSpin spinlock;
} RtSysQueue;

typedef struct rt_mutex {
  /**
   * Inherit from KObjectBase
   */
  struct rt_object parent;
  /**
   * Priority ceiling of mutex
   */
  uint8_t ceiling_priority;
  /**
   * Maximal priority for pending thread
   */
  uint8_t priority;
  /**
   * Current owner of mutex
   */
  struct rt_thread *owner;
  /**
   * The object list taken by thread
   */
  rt_list_t taken_list;
  /**
   * SysQueue for mutex
   */
  struct RtSysQueue inner_queue;
} rt_mutex;

#if defined(RT_USING_MUTEX)
typedef struct MutexInfo {
  rt_list_t taken_list;
  struct rt_mutex *pending_to;
} MutexInfo;
#endif

#if !defined(RT_USING_MUTEX)
typedef struct MutexInfo {

} MutexInfo;
#endif

typedef struct EventInfo {
#if defined(RT_USING_EVENT)
  uint32_t set
#endif
  ;
#if defined(RT_USING_EVENT)
  uint8_t info
#endif
  ;
} EventInfo;

typedef struct CpuAffinity {
#if defined(RT_USING_SMP)
  uint8_t bind_cpu
#endif
  ;
#if defined(RT_USING_SMP)
  uint8_t oncpu
#endif
  ;
} CpuAffinity;

typedef struct LockInfo {
#if defined(RT_DEBUGING_SPINLOCK)
  struct RawSpin *wait_lock
#endif
  ;
#if defined(RT_DEBUGING_SPINLOCK)
  struct RawSpin *hold_locks[8]
#endif
  ;
#if defined(RT_DEBUGING_SPINLOCK)
  uintptr_t hold_count
#endif
  ;
} LockInfo;

typedef struct rt_thread {
  struct rt_object parent;
  rt_list_t tlist;
  /**
   * thread status
   */
  ThreadState stat;
  /**
   * priority manager
   */
  struct ThreadPriority priority;
  /**
   * stack point and cleanup func
   */
  struct rt_stack stack;
  ThreadCleanupFn cleanup;
  uintptr_t tid;
  /**
   * built-in thread timer, used for wait timeout
   */
  struct rt_timer thread_timer;
  struct RawSpin spinlock;
  /**
   * error code
   */
  Error error;
  /**
   * time slice
   */
  struct TimeSlice time_slice;
#if defined(RT_USING_MUTEX)
  struct MutexInfo mutex_info
#endif
  ;
#if defined(RT_USING_EVENT)
  struct EventInfo event_info
#endif
  ;
#if defined(RT_USING_SMP)
  /**
   * cpu affinity
   */
  struct CpuAffinity cpu_affinity
#endif
  ;
#if defined(RT_DEBUGING_SPINLOCK)
  struct LockInfo lock_info
#endif
  ;
} rt_thread;

typedef void (*RtSchedulerHook)(struct rt_thread *from, struct rt_thread *to);

typedef void (*RtSchedulerSwitchHook)(struct rt_thread *tid);

/**
 * Event flag raw structure
 */
typedef struct rt_event {
  /**
   * Inherit from KObjectBase
   */
  struct rt_object parent;
  /**
   * Event flog set value
   */
  uint32_t set;
  /**
   * SysQueue for Event flag
   */
  struct RtSysQueue inner_queue;
} rt_event;

/**
 * Mailbox raw structure
 */
typedef struct rt_mailbox {
  /**
   * Inherit from KObjectBase
   */
  struct rt_object parent;
  /**
   * SysQueue for mailbox
   */
  struct RtSysQueue inner_queue;
} rt_mailbox;

/**
 * MessageQueue raw structure
 */
typedef struct rt_messagequeue {
  /**
   * Inherit from KObjectBase
   */
  struct rt_object parent;
  /**
   * SysQueue for mailbox
   */
  struct RtSysQueue inner_queue;
  /**
   * ABI compatibility
   */
  uint16_t entry;
} rt_messagequeue;

/**
 * Semaphore raw structure
 */
typedef struct rt_semaphore {
  /**
   * Inherit from KObject
   */
  struct rt_object parent;
  /**
   * Spin lock semaphore used
   */
  struct RawSpin spinlock;
  /**
   * SysQueue for semaphore
   */
  struct RtSysQueue inner_queue;
} rt_semaphore;

typedef void (*ThreadEntryFn)(void*);

typedef void (*IrqHookFn)(void);

#endif /* KERN_RUST_WRAPPER_H */
