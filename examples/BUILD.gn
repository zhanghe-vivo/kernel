import("//build/templates/rust.gni")
import("//build/toolchain/bluekernel.gni")
import("//kernel/common_crate_rustflags.gni")

group("run_examples") {
  deps = [ ":tty_loopback_runner($kernel_toolchain)" ]
  # FIXME: We have plenty of symbols not implemented in librs.
  # It worked with fake implementations, however we need canonical
  # implementations.
  #deps += [ ":run_std_thread_demo($libc_toolchain)" ]
}

common_deps = []
if (coverage) {
  common_deps += [ "//external/minicov/v0.3.7:minicov" ]
}

build_rust("tty_loopback") {
  crate_name = "tty_loopback"
  crate_type = "bin"
  sources = [ "tty_loopback/src/main.rs" ]
  edition = "2021"
  proc_macro_deps = [ "//external/paste/v1.0.15:paste" ]
  deps = [
    "//external/log/v0.4.22:log",
    "//kernel/kernel:bluekernel",
    "//kernel/rsrt:rsrt",
    "//libc:libc",
  ]
  deps += common_deps

  inputs = [ "//kernel/kernel/src/boards_ng/$board/link.x" ]
  rustflags = common_image_rustflags
  rustflags += common_crate_rustflags
}

gen_qemu_runner("tty_loopback_runner") {
  img = ":tty_loopback"
  qemu = "$qemu_exe"
  machine = "$machine"
  if ("$board" == "qemu_virt64_aarch64") {
    qemu_args = "-cpu cortex-a53 -net none -chardev stdio,id=con,mux=on -serial chardev:con -mon chardev=con,mode=readline"
  }
}

executable("std_thread_demo") {
  crate_name = "std_thread_demo"
  crate_type = "bin"
  sources = [ "std_thread/src/main.rs" ]
  deps = [
    "//kernel/librs:librs",
    "//kernel/rsrt:rsrt_std",
  ]
  deps += common_deps
  rustflags = []
  rustflags += common_image_rustflags
  rustflags += common_crate_rustflags
}

gen_qemu_runner("std_thread_demo_runner") {
  img = ":std_thread_demo"
  qemu = "$qemu_exe"
  machine = "$machine"
  semihosting = true
  if ("$board" == "qemu_virt64_aarch64") {
    qemu_args = "-cpu cortex-a53 -net none -chardev stdio,id=con,mux=on -serial chardev:con -mon chardev=con,mode=readline"
  } else if ("$board" == "qemu_riscv64") {
    qemu_args = qemu_riscv64_run_args
  }
}

run_qemu_check("run_std_thread_demo") {
  runner = ":std_thread_demo_runner"
  checker = "std_thread/src/main.rs"
  if (coverage) {
    img = ":std_thread_demo"
  }
}
