import("//build/templates/rust.gni")
import("//build/toolchain/bluekernel.gni")
import("//kernel/common_crate_rustflags.gni")

build_rust("librs") {
  crate_type = "rlib"
  crate_name = "librs"
  sources = [ "src/lib.rs" ]
  deps = [
    "//external/semihosting/v0.1.20:semihosting",
    "//external/spin/v0.9.8:spin",
    "//kernel/header:bluekernel_header",
    "//kernel/scal:bluekernel_scal",
    "//libc:libc",
  ]
  rustflags = common_crate_rustflags
}

build_rust("librs_swi") {
  crate_type = "rlib"
  crate_name = "librs"
  sources = [ "src/lib.rs" ]
  deps = [
    "//external/spin/v0.9.8:spin",
    "//kernel/header:bluekernel_header",
    "//kernel/scal:bluekernel_scal_swi",
    "//libc:libc",
  ]
  rustflags = common_crate_rustflags
}

build_rust("librs_static") {
  crate_type = "staticlib"
  crate_name = "librs"
  sources = [ "src/lib.rs" ]
  deps = [
    "//external/spin/v0.9.8:spin",
    "//kernel/header:bluekernel_header",
    "//kernel/scal:bluekernel_scal_std",
    "//libc:libc",
  ]
  rustflags = common_crate_rustflags
}

build_rust("librs_test") {
  testonly = true
  crate_type = "rlib"
  crate_name = "librs"
  sources = [ "src/lib.rs" ]
  deps = [
    "//external/semihosting/v0.1.20:semihosting",
    "//external/spin/v0.9.8:spin",
    "//kernel/header:bluekernel_header",
    "//kernel/scal:bluekernel_scal_test",
    "//libc:libc",
  ]
  rustflags = common_crate_rustflags
}

build_rust("librs_unittest_image") {
  testonly = true
  crate_type = "bin"
  sources = [ "src/lib.rs" ]
  edition = "2021"

  deps = [
    "//external/semihosting/v0.1.20:semihosting",
    "//external/spin/v0.9.8:spin",
    "//kernel/header:bluekernel_header",
    "//kernel/kernel:bluekernel",
    "//kernel/rsrt:rsrt",
    "//kernel/scal:bluekernel_scal_test",
    "//libc:libc",
  ]
  proc_macro_deps = [ "//kernel/test_harness:bluekernel_test_macro" ]
  inputs = [ "//kernel/kernel/src/boards/$board/link.x" ]
  rustflags = test_image_rustflags
  rustflags += common_crate_rustflags
}

gen_qemu_runner("librs_unittest_runner") {
  testonly = true
  img = ":librs_unittest_image"
  qemu = "$qemu_exe"
  machine = "$machine"
  semihosting = true
  if ("$board" == "qemu_virt64_aarch64") {
    qemu_args =
        "-cpu cortex-a53" + " -chardev stdio,id=con,mux=on" +
        " -serial chardev:con" + " -global virtio-mmio.force-legacy=false" +
        " -device virtio-rng-device,bus=virtio-mmio-bus.1" +
        " -mon chardev=con,mode=readline"
    block_img = "test.img"
  } else if ("$board" == "qemu_riscv64") {
    qemu_args = qemu_riscv64_run_args
  }
}

run_qemu_check("run_librs_unittest") {
  testonly = true
  runner = ":librs_unittest_runner"
  if (coverage) {
    img = ":librs_unittest_image"
    checker = "//kernel/kernel/src/cov.rs"
  } else {
    checker = "src/lib.rs"
  }
}

group("check_librs") {
  testonly = true
  deps = [
    ":run_librs_unittest",
    "tests/integration_test:run_librs_integration_test",

    # wait for virtio
    # "tests/posixtestsuite:run_librs_posix_testsuite",
  ]
}

group("check_librs_linux_emulation") {
  testonly = true
  deps = [ "tests/linux_emulation_test:run_librs_linux_emulation" ]
}
